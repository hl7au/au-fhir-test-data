map "http://example.org/StructureMap/CSV2MedicationStatement" = "CSV2MedicationStatement"

uses "http://example.org/StructureDefinition/MedicationStatementCSV" as source
uses "http://hl7.org/fhir/StructureDefinition/MedicationStatement" as target

group ToMedicationStatement(source src : MedicationStatementCSV, target tgt : MedicationStatement) {

    // id
    src.id as s_id where length() > 0 -> tgt.id = s_id; 

    // meta.profile
    src -> tgt.meta = create('Meta') as meta then {
        src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-medicationstatement';
    };

    // status: code
    src.status as s_status where length() > 0 -> tgt.status = s_status;
    // missing status
    src.status as s_status where length() = 0 -> tgt.status = 'unknown';

    // medication[x] 1..1 MS
    // medicationCodableConcept
    src.medication_coding1_code as s_code where length() > 0 -> tgt then {
        src.medication_coding1_system as s_system -> tgt.medication = create('CodeableConcept') as t_medication then {
            src.medication_coding1_display as s_display where length() > 0 -> t_medication.coding = c(s_system, s_code) as t_coding first then {
                s_display -> t_coding.display = s_display;
            };

            src.medication_coding2_code as s_code where length() > 0 -> t_medication then {
                src.medication_coding2_system as s_system -> t_medication.coding = c(s_system, s_code) as t_coding first then {
                    src.medication_coding2_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
            };
            src.medication_text as s_text where length() > 0 -> t_medication.text = s_text;
        };
    };

    // medicationReference 
    src.medication_reference_id as s_reference where length() > 0 -> tgt.medication = create('Reference') as t_medication then {
        // contained reference
        src.contained_code_coding1_code as s_code where length() > 0 -> t_medication then {
            s_reference -> t_medication.reference = append('#', s_reference);
        };

        // relative reference
        src.contained_code_coding1_code as s_code where length() = 0 -> t_medication then {
            s_reference -> t_medication.reference = append('Medication/', s_reference);
        };

        src.medication_display as s_display where length() > 0 -> t_medication.display = s_display;
    };

    src.medication_reference_id where length() = 0 -> tgt then {
        src.medication_coding1_code where length() = 0 -> tgt then {
            src -> tgt.medication = cc('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');
        };
    };

    // subject 1..1 MS
    src.subject_reference_id as s_reference where length() > 0 -> tgt.subject as t_subject then {
        //src.subject_reference_type as s_type where length() > 0 -> t_subject.reference = append(s_type, '/', s_reference);
        //src.subject_reference_type where length() = 0 -> t_subject.reference = append('Patient/', s_reference);
        s_reference -> t_subject.reference = append('Patient/', s_reference);

        src.subject_display as s_display where length() > 0 -> t_subject.display = s_display;
    };

    // subject suppressed
    src.subject_reference_id as s_reference where length() = 0 -> tgt.subject as t_subject then {
        s_reference -> t_subject.extension as t_extension first then {
            s_reference -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('masked', 'code');
      };
    };

    // effective[x] 0..1 MS
    src.effectiveDateTime as s_effectiveDateTime where length() > 0 -> tgt.effective = cast(s_effectiveDateTime, 'dateTime');
    src.effectiveDateTime where length() = 0 -> tgt.effective = create('Period') as t_effective then {
        src.effectivePeriod_start as s_start where length() > 0 -> t_effective.start = cast(s_start, 'dateTime');
        src.effectivePeriod_end as s_end where length() > 0 -> t_effective.end = cast(s_end, 'dateTime');
    };

    // dateAsserted 0..1 MS
    src.dateAsserted as s_asserted where length() > 0 -> tgt.dateAsserted = s_asserted;

    // reasonCode 0..* MS
    src.reasonCode1_coding1_code as s_code -> tgt.reasonCode as t_reasonCode first then {
        s_code where length() > 0 -> t_reasonCode then {
            src.reasonCode1_coding1_system as s_system -> t_reasonCode.coding = c(s_system, s_code) as t_coding first then {
                src.reasonCode1_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };
        src.reasonCode1_text as s_text where length() > 0 -> t_reasonCode.text = s_text;
    };

    // reasonReference 0..* MS
    src.reasonReference1_reference as s_reference where length() > 0 -> tgt.reasonReference as t_reasonReference first then {
        s_reference -> t_reasonReference.reference = s_reference;

        src.reasonReference1_display as s_display where length() > 0 -> t_reasonReference.display = s_display;
    };


    // note 0..*
    src.note_text as s_text where length() > 0 -> tgt.note as t_note first then {
        s_text -> t_note.text = s_text;
    };

    // dosage 0..* MS
    src.dosageInstruction_text as s_text where length() > 0 -> tgt.dosage as t_dosage first then {  
        s_text -> t_dosage.text = s_text;

        src.dosageInstruction_timing_repeat_frequency as s_frequency where length() > 0 -> t_dosage.timing as t_timing then {
            s_frequency -> t_timing.repeat as t_repeat then {
                s_frequency -> t_repeat.frequency = s_frequency;
                src.dosageInstruction_timing_repeat_frequencyMax as s_frequencyMax where length() > 0 -> t_repeat.frequencyMax = s_frequencyMax;
                src.dosageInstruction_timing_repeat_period as s_period where length() > 0 -> t_repeat.period = s_period;
                src.dosageInstruction_timing_repeat_periodMax as s_periodMax where length() > 0 -> t_repeat.periodMax = s_periodMax;
                src.dosageInstruction_timing_repeat_periodUnit as s_periodUnit where length() > 0 -> t_repeat.periodUnit = s_periodUnit;
            };
        };

        src.dosageInstruction_asNeededBoolean as s_asNeededBoolean where length() > 0 -> t_dosage.asNeeded = cast(s_asNeededBoolean, 'boolean');

        src.dosageInstruction_route_coding_code as s_code where length() > 0 -> t_dosage.route as t_route then {
            src.dosageInstruction_route_coding_system as s_system -> t_route.coding = c(s_system, s_code) as t_coding first then {
                src.dosageInstruction_route_coding_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };


        src.dosageInstruction_doseAndRate_doseQuantity_value as s_value where length() > 0 -> t_dosage.doseAndRate as t_doseAndRate first then {
            s_value -> t_doseAndRate.dose = create('Quantity') as t_doseQuantity then {
                s_value -> t_doseQuantity.value = s_value;
                src.dosageInstruction_doseAndRate_doseQuantity_unit as s_unit where length() > 0 -> t_doseQuantity.unit = s_unit;
                src.dosageInstruction_doseAndRate_doseQuantity_system as s_system where length() > 0 -> t_doseQuantity.system = s_system;
                src.dosageInstruction_doseAndRate_doseQuantity_code as s_code where length() > 0 -> t_doseQuantity.code = s_code;
            };                    
        };
        
    };

    // contained Medication
    src.contained_code_coding1_code as s_code where length() > 0 -> tgt.contained = create('Medication') as t_medication first then {
        
        // contained id
        src.medication_reference_id as s_reference where length() > 0 -> t_medication then {
            s_reference -> t_medication.id = s_reference;
        };

        // contained meta
        s_code -> t_medication.meta = create('Meta') as meta then {
            src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-medication';
        };

        // contained code 1..1 MS
        s_code -> t_medication.code as t_code then {
            s_code -> t_code then {
                src.contained_medication_code_coding1_system as s_system -> t_code.coding = c(s_system, s_code) as t_coding first then {
                    src.contained_medication_code_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;

                    src.contained_medication_code_coding1_medicationType_code as s_medicationType_code where length() > 0 -> t_coding.extension as t_medication_type first then {
                        s_medicationType_code -> t_medication_type.url = "http://hl7.org.au/fhir/StructureDefinition/medication-type";
                        s_medicationType_code -> t_medication_type.value = c("http://terminology.hl7.org.au/CodeSystem/medication-type", s_medicationType_code) as t_coding then {
                            src.contained_medication_code_coding1_medicationType_display as s_medicationType_display where length() > 0 -> t_coding.display = s_medicationType_display;
                        };
                    }; 
                };
            };

            src.contained_medication_code_text as s_text where length() > 0 -> t_code.text = s_text;
        };

        // contained form 0..1 
        src.contained_medication_form_coding1_code as s_code where length() > 0 -> t_medication.form as t_form then {
            s_code -> t_form then {
                src.contained_medication_form_coding1_system as s_system -> t_form.coding = c(s_system, s_code) as t_coding first then {
                    src.contained_medication_form_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
            };

            src.contained_medication_form_text as s_text where length() > 0 -> t_form.text = s_text;
        };
    };
}