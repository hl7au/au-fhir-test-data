map "http://example.org/StructureMap/CSV2AllergyIntolerance" = "CSV2AllergyIntolerance"

uses "http://example.org/StructureDefinition/AllergyIntoleranceCSV" as source
uses "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance" as target
//uses "http://hl7.org/fhir/StructureDefinition/Identifier" as target

group ToAllergyIntolerance(source src : AllergyIntoleranceCSV, target tgt : AllergyIntolerance) {

    // id
    src.id as s_id where length() > 0 -> tgt.id = s_id; 

    // meta.profile
    src -> tgt.meta = create('Meta') as meta then {
        src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-allergyintolerance';
    };

    // clinicalStatus (SHALL exist when verificationStatus is not 'entered-in-error' - unknown missing data code not supported)
    src.clinicalStatus_code as s_clinicalStatus where length() > 0 -> tgt.clinicalStatus as t_clinicalStatus then {
        s_clinicalStatus -> t_clinicalStatus.coding = c('http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', s_clinicalStatus) as t_coding first then {
            src.clinicalStatus_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.clinicalStatus_text as s_text where length() > 0 -> t_clinicalStatus.text = s_text;
    };

    // verificationStatus
    src.verificationStatus_code as s_verificationStatus where length() > 0 -> tgt.verificationStatus as t_verificationStatus then {
        s_verificationStatus -> t_verificationStatus.coding = c('http://terminology.hl7.org/CodeSystem/allergyintolerance-verification', s_verificationStatus) as t_coding first then {
            src.verificationStatus_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.verificationStatus_text as s_text where length() > 0 -> t_verificationStatus.text = s_text;
    };

    // type 
    src.type as s_type where length() > 0 -> tgt.type = s_type;

    // category 
    src.category as s_category where length() > 0 -> tgt.category = s_category;

    // criticality 
    src.criticality as s_criticality where length() > 0 -> tgt.criticality = s_criticality;


    // code 1..1 MS
    src.code_coding1_code as s_coding1 where length() > 0 -> tgt.code as t_code then {
        src.code_coding1_system as coding1_system -> t_code.coding = c(coding1_system, s_coding1) as t_coding first then {
            src.code_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
        };

        //src.code_coding2_code as s_coding2 where length() > 0 -> t_code.coding = c(src.code_coding2_system, s_coding2) as t_coding first then {
        src.code_coding2_code as s_coding2 where length() > 0 -> t_code then {
            src.code_coding2_system as coding2_system -> t_code.coding = c(coding2_system, s_coding2) as t_coding first then {
                src.code_coding2_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };

        src.code_text as s_text where length() > 0 -> t_code.text = s_text;
    };

    // code missing data
    src.code_coding1_code where length() = 0 -> tgt.code = cc('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');

    // patient 1..1 MS
    src.patient_reference_id as s_reference where length() > 0 -> tgt.patient as t_patient then {
        s_reference -> t_patient.reference = append('Patient/', s_reference);

        src.patient_identifier_value as s_identifier where length() > 0 -> t_patient.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.patient_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.patient_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.patient_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.patient_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // patient suppressed
    src.patient_reference_id as s_reference where length() = 0 -> tgt.patient as t_patient then {
        s_reference -> t_patient.extension as t_extension first then {
            s_reference -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('masked', 'code');
      };
    };

    // encounter
    src.encounter_display as s_display where length() > 0 -> tgt.encounter as t_encounter then {
        s_display -> t_encounter.display = s_display;
    };

    // onsetDateTime
    src.onsetDateTime as s_onset where length() > 0 -> tgt.onset = cast(s_onset, 'dateTime');
    //src.onsetDateTime as s_onset where length() > 0 -> tgt.onset = evaluate(s_onset, toDateTime());

    // onsetAge
    src.onsetAge_value as s_onsetAge where length() > 0 -> tgt.onset = create('Age') as t_onsetAge then {
        s_onsetAge -> t_onsetAge.value = s_onsetAge;
        src.onsetAge_unit as s_unit where length() > 0 -> t_onsetAge.unit = s_unit;
        src.onsetAge_system as s_system where length() > 0 -> t_onsetAge.system = s_system;
        src.onsetAge_code as s_code where length() > 0 -> t_onsetAge.code = s_code;
    };

    // recordedDate
    src.recordedDate as s_recorded where length() > 0 -> tgt.recordedDate = s_recorded;

    // recorder
    src.recorder_reference_id as s_recorder where length() > 0 -> tgt.recorder as t_recorder then {
        src.recorder_reference_type as s_reference_type -> t_recorder.reference = append(s_reference_type, '/', s_recorder);

        src.recorder_identifier_value as s_identifier where length() > 0 -> t_recorder.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.recorder_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.recorder_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.recorder_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.recorder_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // asserter
    src.asserter_reference_id as s_asserter where length() > 0 -> tgt.asserter as t_asserter then {
        src.asserter_reference_type as s_reference_type -> t_asserter.reference = append(s_reference_type, '/', s_asserter);

        src.asserter_identifier_value as s_identifier where length() > 0 -> t_asserter.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.asserter_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.asserter_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.asserter_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.asserter_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };


    // reaction
    src.reaction_manifestation1_code as s_manifestation where length() > 0 -> tgt.reaction as t_reaction first then {

        // reaction.substance
        src.reaction_substance_code as s_substance where length() > 0 -> t_reaction.substance as t_substance then {
            src.reaction_substance_system as s_system -> t_substance.coding = c(s_system, s_substance) as t_coding first then {
                src.reaction_substance_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.reaction_substance_text as s_text where length() > 0 -> t_substance.text = s_text;
        };

        // reaction.manifestation
        src.reaction_manifestation1_code as s_manifestation1 where length() > 0 -> t_reaction.manifestation as t_manifestation first then {
            src.reaction_manifestation1_system as s_system -> t_manifestation.coding = c(s_system, s_manifestation1) as t_coding first then {
                src.reaction_manifestation1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.reaction_manifestation1_text as s_text where length() > 0 -> t_manifestation.text = s_text;
        };

        src.reaction_manifestation2_code as s_manifestation1 where length() > 0 -> t_reaction.manifestation as t_manifestation first then {
            src.reaction_manifestation2_system as s_system -> t_manifestation.coding = c(s_system, s_manifestation1) as t_coding first then {
                src.reaction_manifestation2_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.reaction_manifestation2_text as s_text where length() > 0 -> t_manifestation.text = s_text;
        };

        src.reaction_manifestation3_code as s_manifestation1 where length() > 0 -> t_reaction.manifestation as t_manifestation first then {
            src.reaction_manifestation3_system as s_system -> t_manifestation.coding = c(s_system, s_manifestation1) as t_coding first then {
                src.reaction_manifestation3_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.reaction_manifestation3_text as s_text where length() > 0 -> t_manifestation.text = s_text;
        };

        // reaction.severity 0..1 MS
        src.reaction_severity as s_severity where length() > 0 -> t_reaction.severity = s_severity;

    };
}