map "http://example.org/StructureMap/CSV2Condition" = "CSV2Condition"

uses "http://example.org/StructureDefinition/ConditionCSV" as source
uses "http://hl7.org/fhir/StructureDefinition/Condition" as target

group ToCondition(source src : ConditionCSV, target tgt : Condition) {

    // id
    src.id as s_id where length() > 0 -> tgt.id = s_id; 

    // meta.profile
    src -> tgt.meta = create('Meta') as meta then {
        src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-condition';
    };

    // clinicalStatus 0..1 MS (SHALL be populated if verificationStatus is not 'entered-in-error')
    src.clinicalStatus_code as s_clinicalStatus where length() > 0 -> tgt.clinicalStatus as t_clinicalStatus then {
        s_clinicalStatus -> t_clinicalStatus.coding = c('http://terminology.hl7.org/CodeSystem/condition-clinical', s_clinicalStatus) as t_coding first then {
            src.clinicalStatus_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.clinicalStatus_text as s_text where length() > 0 -> t_clinicalStatus.text = s_text;
    };

    // clinicalStatus missing
    src.clinicalStatus_code where length() = 0 -> tgt.clinicalStatus = cc('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');

    // verificationStatus 0..1 MS
    src.verificationStatus_code as s_verificationStatus where length() > 0 -> tgt.verificationStatus as t_verificationStatus then {
        s_verificationStatus -> t_verificationStatus.coding = c('http://terminology.hl7.org/CodeSystem/condition-ver-status', s_verificationStatus) as t_coding first then {
            src.verificationStatus_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.verificationStatus_text as s_text where length() > 0 -> t_verificationStatus.text = s_text;
    };

    // category 1..* MS
    src.category1_code as s_category1 where length() > 0 -> tgt.category as t_category then {
        src.category1_system as s_system -> t_category.coding = c(s_system, s_category1) as t_coding first then {
            src.category1_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.category2_code as s_category2 where length() > 0 -> t_category then {
            src.category2_system as s_system -> t_category.coding = c(s_system, s_category2) as t_coding first then {
                src.category2_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };
        src.category_text as s_text where length() > 0 -> t_category.text = s_text;
    };

    // category missing
    src.category1_code where length() = 0 -> tgt.category = cc('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');

    // severity 0..1 MS 
    src.severity_code as s_severity where length() > 0 -> tgt.severity as t_severity then {
        src.severity_system as s_system -> t_severity.coding = c(s_system, s_severity) as t_coding first then {
            src.severity_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.severity_text as s_text where length() > 0 -> t_severity.text = s_text;
    };


    // code 1..1 MS
    src.code_coding1_code as s_coding1 where length() > 0 -> tgt.code as t_code then {
        s_coding1 where length() > 0 -> t_code then {
            src.code_coding1_system as coding1_system -> t_code.coding = c(coding1_system, s_coding1) as t_coding first then {
                src.code_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };

            //src.code_coding2_code as s_coding2 where length() > 0 -> t_code.coding = c(src.code_coding2_system, s_coding2) as t_coding first then {
            src.code_coding2_code as s_coding2 where length() > 0 -> t_code then {
                src.code_coding2_system as coding2_system -> t_code.coding = c(coding2_system, s_coding2) as t_coding first then {
                    src.code_coding2_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
            };
        };
        src.code_text as s_text where length() > 0 -> t_code.text = s_text;
    };

    // code coding missing
    src.code_coding1_code as s_coding1 where length() = 0 -> tgt.code as t_code then {
        // text only 
        src.code_text as s_text where length() > 0 -> t_code.text = s_text;
        // code missing
        src.code_text as s_text where length() = 0 -> t_code.coding = c('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');
    };

    // bodySite 0..* MS 
    src.bodySite_code as s_bodySite where length() > 0 -> tgt.bodySite as t_bodySite then {
        src.bodySite_system as s_system -> t_bodySite.coding = c(s_system, s_bodySite) as t_coding first then {
            src.bodySite_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.bodySite_text as s_text where length() > 0 -> t_bodySite.text = s_text;
    };

    // subject 1..1 MS
    src.subject_reference_id as s_reference where length() > 0 -> tgt.subject as t_subject then {
        s_reference -> t_subject.reference = append('Patient/', s_reference);

        src.subject_identifier_value as s_identifier where length() > 0 -> t_subject.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.subject_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.subject_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.subject_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.subject_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
        src.subject_display as s_display where length() > 0 -> t_subject.display = s_display;
    };

    // subject suppressed
    src.subject_reference_id as s_reference where length() = 0 -> tgt.subject as t_subject then {
        s_reference -> t_subject.extension as t_extension first then {
            s_reference -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('masked', 'code');
      };
    };

    // encounter 0..1 MS
    src.encounter_reference_id as s_reference where length() > 0 -> tgt.encounter as t_encounter then {
        s_reference -> t_encounter.reference = append('Encounter/', s_reference);
    };

    // onset 0..1 MS
    // onsetDateTime
    src.onsetDateTime as s_onset where length() > 0 -> tgt.onset = cast(s_onset, 'dateTime');

    // onsetAge
    src.onsetAge_value as s_onsetAge where length() > 0 -> tgt.onset = create('Age') as t_onsetAge then {
        s_onsetAge -> t_onsetAge.value = s_onsetAge;
        src.onsetAge_unit as s_unit where length() > 0 -> t_onsetAge.unit = s_unit;
        src.onsetAge_system as s_system where length() > 0 -> t_onsetAge.system = s_system;
        src.onsetAge_code as s_code where length() > 0 -> t_onsetAge.code = s_code;
    };

    // abatement 0..1 MS
    // abatementDateTime
    src.abatementDateTime as s_abatement where length() > 0 -> tgt.abatement = cast(s_abatement, 'dateTime');

    // recordedDate 0..1
    src.recordedDate as s_recorded where length() > 0 -> tgt.recordedDate = s_recorded;

    // recorder 0..1 MS
    src.recorder_reference_id as s_recorder where length() > 0 -> tgt.recorder as t_recorder then {
        src.recorder_reference_type as s_reference_type -> t_recorder.reference = append(s_reference_type, '/', s_recorder);

        src.recorder_identifier_value as s_identifier where length() > 0 -> t_recorder.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.recorder_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.recorder_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.recorder_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.recorder_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // asserter 0..1 MS
    src.asserter_reference_id as s_asserter where length() > 0 -> tgt.asserter as t_asserter then {
        src.asserter_reference_type as s_reference_type -> t_asserter.reference = append(s_reference_type, '/', s_asserter);

        src.asserter_identifier_value as s_identifier where length() > 0 -> t_asserter.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.asserter_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.asserter_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.asserter_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.asserter_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // pertainsToGoal 
    src.pertainsToGoal_reference_id as s_pertainsToGoal where length() > 0 -> tgt.extension as t_extension first then {
        s_pertainsToGoal -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/resource-pertainsToGoal',
            t_extension.value = create('Reference') as t_reference then {
                s_pertainsToGoal -> t_reference.reference = append('Goal/', s_pertainsToGoal);
            };
    };

    // evidence 0..*
    src.evidence_detail1_reference as s_evidence_detail1 -> tgt then {
        s_evidence_detail1 where length() > 0 -> tgt.evidence as t_evidence first then {
            // evidence.code 0..*
            src.evidence_code_code as s_evidence_code where length() > 0 -> t_evidence.code as t_code first then {
                src.evidence_code_system as s_system -> t_code.coding = c(s_system, s_evidence_code) as t_coding first then {
                    src.evidence_code_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.evidence_code_text as s_text where length() > 0 -> t_t_code.text = s_text;
            };

            // evidence.detail 0..*
            s_evidence_detail1 where length() > 0 -> t_evidence.detail as t_detail first then {
                s_evidence_detail1 -> t_detail.reference = s_evidence_detail1;
                src.evidence_detail1_display as s_display where length() > 0 -> t_detail.display = s_display;
            };
            src.evidence_detail2_reference as s_evidence_detail2 where length() > 0 -> t_evidence.detail as t_detail first then {
                s_evidence_detail2 -> t_detail.reference = s_evidence_detail2;
                src.evidence_detail2_display as s_display where length() > 0 -> t_detail.display = s_display;
            };
            src.evidence_detail3_reference as s_evidence_detail3 where length() > 0 -> t_evidence.detail as t_detail first then {
                s_evidence_detail3 -> t_detail.reference = s_evidence_detail3;
                src.evidence_detail3_display as s_display where length() > 0 -> t_detail.display = s_display;
            };
        };

        // evidence.code when no evidence.detail 0..*
        s_evidence_detail1 where length() = 0 -> tgt then {
            src.evidence_code_code as s_evidence_code where length() > 0 -> tgt.evidence as t_evidence first then {
                s_evidence_code -> t_evidence.code as t_code first then {
                    src.evidence_code_system as s_system -> t_code.coding = c(s_system, s_evidence_code) as t_coding first then {
                        src.evidence_code_display as s_display where length() > 0 -> t_coding.display = s_display;
                    };
                    src.evidence_code_text as s_text where length() > 0 -> t_t_code.text = s_text;
                };
            };
        };
    };

    // note 0..* MS
    src.note_text as s_note where length() > 0 -> tgt.note as t_note first then {
        s_note -> t_note.text = s_note;
    };
}