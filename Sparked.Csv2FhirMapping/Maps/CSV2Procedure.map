map "http://example.org/StructureMap/CSV2Procedure" = "CSV2Procedure"

uses "http://example.org/StructureDefinition/ProcedureCSV" as source
uses "http://hl7.org/fhir/StructureDefinition/Procedure" as target

group ToProcedure(source src : ProcedureCSV, target tgt : Procedure) {

    // id
    src.id as s_id where length() > 0 -> tgt.id = s_id; 

    // meta.profile
    src -> tgt.meta = create('Meta') as meta then {
        src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-procedure';
    };

    // status: code
    src.status as s_status where length() > 0 -> tgt.status = s_status;
    // missing status
    src.status where length() = 0 -> tgt.status = 'unknown';

    // category 0..1 MS
    src.category_coding1_code as s_category1 where length() > 0 -> tgt.category as t_category then {
        src.category_coding1_system as s_system -> t_category.coding = c(s_system, s_category1) as t_coding first then {
            src.category_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.category_text as s_text where length() > 0 -> t_category.text = s_text;
    };

    // code 1..1 MS
    src.code_coding1_code as s_coding1 where length() > 0 -> tgt.code as t_code then {
        s_coding1 where length() > 0 -> t_code then {
            src.code_coding1_system as coding1_system -> t_code.coding = c(coding1_system, s_coding1) as t_coding first then {
                src.code_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };

            src.code_coding2_code as s_coding2 where length() > 0 -> t_code then {
                src.code_coding2_system as coding2_system -> t_code.coding = c(coding2_system, s_coding2) as t_coding first then {
                    src.code_coding2_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
            };
        };
        src.code_text as s_text where length() > 0 -> t_code.text = s_text;
    };

    // code coding missing
    src.code_coding1_code as s_coding1 where length() = 0 -> tgt.code as t_code then {
        // text only 
        src.code_text as s_text where length() > 0 -> t_code.text = s_text;
        // code missing
        src.code_text where length() = 0 -> t_code.coding = c('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');
    };

    // subject 1..1 MS
    src.subject_reference_id as s_reference where length() > 0 -> tgt.subject as t_subject then {
        src.subject_reference_type as s_type where length() > 0 -> t_subject.reference = append(s_type, '/', s_reference);
        src.subject_reference_type where length() = 0 -> t_subject.reference = append('Patient/', s_reference);

        src.subject_display as s_display where length() > 0 -> t_subject.display = s_display;
    };

    // subject suppressed
    src.subject_reference_id where length() = 0 -> tgt.subject as t_subject then {
        src -> t_subject.extension as t_extension first then {
            src -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('masked', 'code');
      };
    };

    // encounter 0..1 MS
    src.encounter_reference_id as s_reference where length() > 0 -> tgt.encounter as t_encounter then {
        s_reference -> t_encounter.reference = append('Encounter/', s_reference);
        src.encounter_display as s_display where length() > 0 -> t_encounter.display = s_display;
    };

    // performedDateTime 0..1 MS
    src.performedDateTime as s_performed where length() > 0 -> tgt.performed = cast(s_performed, 'dateTime');

    // recorder 0..1 MS
    src.recorder_reference_id as s_recorder where length() > 0 -> tgt.recorder as t_recorder then {
        src.recorder_reference_type as s_reference_type -> t_recorder.reference = append(s_reference_type, '/', s_recorder);

        src.recorder_identifier_value as s_identifier where length() > 0 -> t_recorder.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.recorder_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.recorder_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.recorder_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.recorder_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // asserter 0..1 MS
    src.asserter_reference_id as s_asserter where length() > 0 -> tgt.asserter as t_asserter then {
        src.asserter_reference_type as s_reference_type -> t_asserter.reference = append(s_reference_type, '/', s_asserter);

        src.asserter_identifier_value as s_identifier where length() > 0 -> t_asserter.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.asserter_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.asserter_identifier_type as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.asserter_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.asserter_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
    };

    // performer 0..* MS
    src.performer1_actor_reference_id as s_actor_id where length() > 0 -> tgt.performer as t_performer first then {
        
        s_actor_id -> t_performer.actor as t_actor then {
            s_actor_id where length() > 0 -> t_actor then {
                src.performer1_actor_reference_type as s_actor_type where length() > 0 -> t_actor.reference = append(s_actor_type, '/', s_actor_id);
            };
        };
    };

    // location 0..1 MS
    src.location_reference_id as s_reference_id where length() > 0 -> tgt.location as t_location then {
        s_reference_id -> t_location.reference = append('Location/', s_reference_id);

        src.location_display as s_display where length() > 0 -> t_location.display = s_display;
    };

    // reasonCode 0..* MS
    src.reasonCode1_coding1_code as s_reasonCode1 -> tgt.reasonCode as t_reasonCode first then {
        s_reasonCode1 where length() > 0 -> t_reasonCode then {
            src.reasonCode1_coding1_system as coding1_system -> t_reasonCode.coding = c(coding1_system, s_reasonCode1) as t_coding first then {
                src.reasonCode1_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };
        src.reasonCode1_text as s_text where length() > 0 -> t_reasonCode.text = s_text;
    };

    // reasonReference 0..* MS
    src.reasonReference1_reference_id as s_reference where length() > 0 -> tgt.reasonReference as t_reasonReference first then {
        src.reasonReference1_reference_type as s_type where length() > 0 -> t_reasonReference.reference = append(s_type, '/', s_reference);

        src.reasonReference1_display as s_display where length() > 0 -> t_reasonReference.display = s_display;
    };

    // focalDevice 0..*
    src.focalDevice1_manipulated_display as s_manipulated_display where length() > 0 -> tgt.focalDevice as t_focalDevice first then {   
        src.focalDevice1_action_coding1_code as s_action_code where length() > 0 -> t_focalDevice.action as t_action then {
            src.focalDevice1_action_coding1_system as coding_system -> t_action.coding = c(coding_system, s_action_code) as t_coding first then {
                src.focalDevice1_action_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };

        s_manipulated_display -> t_focalDevice.manipulated as t_manipulated then {
            s_manipulated_display -> t_manipulated.display = s_manipulated_display;
        };
    };
}