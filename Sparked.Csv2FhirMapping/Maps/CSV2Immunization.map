map "http://example.org/StructureMap/CSV2Immunization" = "CSV2Immunization"

uses "http://example.org/StructureDefinition/ImmunizationCSV" as source
uses "http://hl7.org/fhir/StructureDefinition/Immunization" as target

group ToImmunization(source src : ImmunizationCSV, target tgt : Immunization) {

    // id
    src.id as s_id where length() > 0 -> tgt.id = s_id; 

    // meta.profile
    src -> tgt.meta = create('Meta') as meta then {
        src -> meta.profile = 'http://hl7.org.au/fhir/core/StructureDefinition/au-core-immunization';
    };

    // vaccine-serial-number MS
    src.vaccineSerialNumber as s_serialNumber where length() > 0 -> tgt.extension as t_extension first then {
        s_serialNumber -> t_extension.url = 'http://hl7.org.au/fhir/StructureDefinition/vaccine-serial-number',
            t_extension.value = s_serialNumber;
    };

    // identifier MS
    src.identifier1_value as s_value where length() > 0 -> tgt.identifier as t_identifier first then {

        src.identifier1_use as s_use where length() > 0 -> t_identifier.use = s_use;

        s_value -> t_identifier.value = s_value;
        src.identifier1_system as s_system where length() > 0 -> t_identifier.system = s_system;

        src.identifier1_type_code as s_type where length() > 0 -> t_identifier.type as t_type then {
            s_type -> t_type.coding as t_coding first then {
                s_type -> t_coding.code = s_type, 
                t_coding.system = 'http://terminology.hl7.org/CodeSystem/v2-0203';
                src.identifier1_type_system as s_type_system where length() > 0 -> t_coding.system = s_type_system;
                src.identifier1_type_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.identifier1_type_text as s_text where length() > 0 -> t_type.text = s_text;
        };
    };

    // status: 1..1 MS
    src.status as s_status -> tgt.status = s_status;

    // statusReason 0..1 MS
    src.statusReason_code as s_statusReason where length() > 0 -> tgt.statusReason as t_statusReason then {
        src.statusReason_system as s_system -> t_statusReason.coding = c(s_system, s_statusReason) as t_coding first then {
            src.statusReason_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.statusReason_text as s_text where length() > 0 -> t_statusReason.text = s_text;
    };

    // vaccineCode 1..1 MS
    src.vaccineCode_coding1_code as s_coding1 where length() > 0 -> tgt.vaccineCode as t_vaccineCode then {
        src.vaccineCode_coding1_system as coding1_system -> t_vaccineCode.coding = c(coding1_system, s_coding1) as t_coding first then {
            src.vaccineCode_coding1_display as s_display where length() > 0 -> t_coding.display = s_display;
        };

        src.vaccineCode_coding2_code as s_coding2 where length() > 0 -> t_vaccineCode then {
            src.vaccineCode_coding2_system as coding2_system -> t_vaccineCode.coding = c(coding2_system, s_coding2) as t_coding first then {
                src.vaccineCode_coding2_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };

        src.vaccineCode_text as s_text where length() > 0 -> t_vaccineCode.text = s_text;
    };

    // vaccineCode free text or missing data
    src.vaccineCode_coding1_code as s_coding1 where length() = 0 -> tgt.vaccineCode as t_code then {
        // text only 
        src.vaccineCode_text as s_text where length() > 0 -> t_code.text = s_text;
        // code missing
        src.vaccineCode_text as s_text where length() = 0 -> t_code.coding = c('http://terminology.hl7.org/CodeSystem/data-absent-reason', 'unknown');
    };


    // patient 1..1 MS
    src.patient_reference_id as s_patient_id where length() > 0 -> tgt.patient as t_patient then {
        s_patient_id -> t_patient.reference = append('Patient/', s_patient_id);

        src.patient_identifier_value as s_identifier where length() > 0 -> t_patient.identifier as t_identifier then {
            s_identifier -> t_identifier.value = s_identifier;
            src.patient_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
            src.patient_identifier_type_code as s_type where length() > 0 -> t_identifier.type as t_type then {
                s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                    src.patient_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                };
                src.patient_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
            };
        };
        src.patient_display as s_patient_display where length() > 0 -> t_patient.display = s_patient_display;
    };

    // patient suppressed
    src.patient_reference_id as s_reference where length() = 0 -> tgt.patient as t_patient then {
        s_reference -> t_patient.extension as t_extension first then {
            s_reference -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('masked', 'code');
      };
    };

    // encounter 0..1 MS
    src.encounter_reference_id as s_reference where length() > 0 -> tgt.encounter as t_encounter then {
        s_reference -> t_encounter.reference = append('Encounter/', s_reference);
    };

    // occurrence 1..1 MS
    // occurrenceDateTime
    src.occurrenceDateTime as s_occurrence where length() > 0 -> tgt.occurrence = cast(s_occurrence, 'dateTime');

    // missing occurrence
    src.occurrenceDateTime as s_occurrence where length() = 0 -> tgt.occurrence = create('dateTime') as t_occurrence then {
        s_occurrence -> t_occurrence.extension as t_extension first then {
            s_occurrence -> t_extension.url = 'http://hl7.org/fhir/StructureDefinition/data-absent-reason',
            t_extension.value = cast('unknown', 'code');
      };
    };

    // recorded 0..1
    src.recorded as s_recorded where length() > 0 -> tgt.recorded = s_recorded;

    // primarySource 0..1
    src.primarySource as s_primarySource where length() > 0 -> tgt.primarySource = s_primarySource;

    // location 0..1
    src.location_reference_id as s_location where length() > 0 -> tgt.location as t_location then {
        s_location -> t_location.reference = append('Location/', s_location);
    };

    // manufacturer 0..1
    src.manufacturer_display as s_display where length() > 0 -> tgt.manufacturer as t_manufacturer then {
        s_display -> t_manufacturer.display = s_display;
    };

    // lotNumber: 0..1
    src.lotNumber as s_lotNumber where length() > 0 -> tgt.lotNumber = s_lotNumber;

    // site 0..1 
    src.site_code as s_site where length() > 0 -> tgt.site as t_site then {
        src.site_system as s_system -> t_site.coding = c(s_system, s_site) as t_coding first then {
            src.site_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.site_text as s_text where length() > 0 -> t_site.text = s_text;
    };

    // route 0..1 
    src.route_code as s_route where length() > 0 -> tgt.route as t_route then {
        src.route_system as s_system -> t_route.coding = c(s_system, s_route) as t_coding first then {
            src.route_display as s_display where length() > 0 -> t_coding.display = s_display;
        };
        src.route_text as s_text where length() > 0 -> t_route.text = s_text;
    };

    // performer 0..* MS
    src.performer1_function_code as s_performer_function where length() > 0 -> tgt.performer as t_performer then {
        
        s_performer_function -> t_performer.function as t_function then {
            src.performer1_function_system as s_system -> t_function.coding = c(s_system, s_performer_function) as t_coding first then {
                src.performer1_function_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
            src.performer1_function_text as s_text -> t_function.text = s_text;
        };

        src.performer1_actor_reference_id as s_actor_id -> t_performer.actor as t_actor then {
            s_actor_id where length() > 0 -> t_actor then {
                src.performer1_actor_reference_type as s_actor_type where length() > 0 -> t_actor.reference = append(s_actor_type, '/', s_actor_id);
            };

            src.performer1_actor_identifier_value as s_identifier where length() > 0 -> t_actor.identifier as t_identifier then {
                s_identifier -> t_identifier.value = s_identifier;
                src.performer1_actor_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
                src.performer1_actor_identifier_type_code as s_type where length() > 0 -> t_identifier.type as t_type then {
                    s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                        src.performer1_actor_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                    };
                    src.performer1_actor_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
                };
                src.performer1_actor_identifier_assigner_display as s_assigner where length() > 0 -> t_identifier.assigner as t_assigner then {
                    s_assigner -> t_assigner.display = s_assigner;
                };
            };
        };
    };

    src.performer2_function_code as s_performer_function where length() > 0 -> tgt.performer as t_performer then {
        
        s_performer_function -> t_performer.function as t_function then {
            src.performer1_function_system as s_system -> t_function.coding = c(s_system, s_performer_function) as t_coding first then {
                src.performer1_function_display as s_display where length() > 0 -> t_coding.display = s_display;
            };
        };

        s_performer_function -> t_performer.actor as t_actor then {
            src.performer2_actor_reference_id as s_actor_id where length() > 0 -> t_actor then {
                src.performer2_actor_reference_type as s_actor_type where length() > 0 -> t_actor.reference = append(s_actor_type, '/', s_actor_id);
            };

            src.performer2_actor_identifier_value as s_identifier where length() > 0 -> t_actor.identifier as t_identifier then {
                s_identifier -> t_identifier.value = s_identifier;
                src.performer2_actor_identifier_system as s_system where length() > 0 -> t_identifier.system = s_system;
                src.performer2_actor_identifier_type_code as s_type where length() > 0 -> t_identifier.type as t_type then {
                    s_type -> t_type.coding = c('http://terminology.hl7.org/CodeSystem/v2-0203', s_type) as t_coding first then {
                        src.performer2_actor_identifier_type_display as s_display where length() > 0 -> t_coding.display = s_display;
                    };
                    src.performer2_actor_identifier_type_text as s_text where length() > 0 -> t_type.text = s_text;
                };
                src.performer2_actor_identifier_assigner_display as s_assigner where length() > 0 -> t_identifier.assigner as t_assigner then {
                    s_assigner -> t_assigner.display = s_assigner;
                };
            };
        };
    };

    // protocolApplied 0..* MS
    src.protocolApplied1_doseNumberPositiveInt as s_doseNumber where length() > 0 -> tgt.protocolApplied as t_protocolApplied first then {
        // series 0..1 MS
        src.protocolApplied1_series as s_series where length() > 0 -> t_protocolApplied.series = s_series;
        
        // targetDisease 0..* MS
        src.protocolApplied1_targetDisease1_code as s_targetDisease_code -> t_protocolApplied then {
            s_targetDisease_code where length() > 0 -> t_protocolApplied.targetDisease as t_targetDisease first then {
                src.protocolApplied1_targetDisease1_system as s_system -> t_targetDisease.coding = c(s_system, s_targetDisease_code) as t_coding first then {
                    src.protocolApplied1_targetDisease1_display as s_display where length() > 0 -> t_coding.display = s_display;
                };

                src.protocolApplied1_targetDisease1_text as s_text where length() > 0 -> t_targetDisease.text = s_text;
            };

            s_targetDisease_code where length() = 0 -> t_protocolApplied then {
                src.protocolApplied1_targetDisease1_text as s_text where length() > 0 -> t_protocolApplied.targetDisease as t_targetDisease first then {
                    s_text -> t_targetDisease.text = s_text;
                };
            };
        };

        // doseNumber 1..1 MS
        s_doseNumber -> t_protocolApplied.doseNumber = cast(s_doseNumber, 'positiveInt');
    };

    // note 0..* MS
    src.note_text as s_note where length() > 0 -> tgt.note as t_note first then {
        s_note -> t_note.text = s_note;
    };
}